alpha = 0.01,
labels = colnames(data))
plot(pc_0.01, main = "Graph structure alpha = 0.01")
pc_0.001 <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.001,
labels = colnames(data))
plot(pc_0.001, main = "Graph structure alpha = 0.001")
pc_0.00001 <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.00001,
labels = colnames(data))
plot(pc_0.00001, main = "Graph structure alpha = 0.00001")
pc_0.9 <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.9,
labels = colnames(data))
plot(pc_0.9, main = "Graph structure alpha = 0.9")
# run PC algorithm
pc <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.05,
labels = colnames(data))
plot(pc, main = "Graph structure alpha = 0.05")
# run PC algorithm
pc <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.05,
labels = colnames(data))
plot(pc, main = "Graph structure alpha = 0.05")
# run PC algorithm
pc <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.05,
labels = colnames(data))
library(ggplot2)
library(pcalg)
library(BiDAG)
library(graph)
# run PC algorithm
pc <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.05,
labels = colnames(data))
# run PC algorithm
pc <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.05,
#labels = colnames(data)
)
# load the data
data <- readRDS("MVN_DAG.rds")
# plot the scatterplot
ggplot(data, aes(x = A, y = B)) +
geom_point()+
theme(plot.title = element_text(hjust = 0.5))+
ggtitle("Scatterplot observations of A and B") +
xlab("A") +
ylab("B")+
geom_smooth(method = 'lm')
# run PC algorithm
pc <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.05,
labels = colnames(data)
)
plot(pc, main = "Graph structure alpha = 0.05")
ulimit
# run PC algorithm
pc <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.05,
labels = colnames(data)
)
plot(pc, main = "Graph structure alpha = 0.05")
# run PC algorithm
pc <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.05,
labels = colnames(data)
)
plot(pc, main = "Graph structure alpha = 0.05")
knitr::opts_chunk$set(echo = TRUE)
# run PC algorithm
pc <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.05,
labels = colnames(data)
)
library(ggplot2)
library(pcalg)
library(BiDAG)
library(graph)
# load the data
data <- readRDS("MVN_DAG.rds")
# plot the scatterplot
ggplot(data, aes(x = A, y = B)) +
geom_point()+
theme(plot.title = element_text(hjust = 0.5))+
ggtitle("Scatterplot observations of A and B") +
xlab("A") +
ylab("B")+
geom_smooth(method = 'lm')
# run PC algorithm
pc <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.05,
labels = colnames(data)
)
plot(pc, main = "Graph structure alpha = 0.05")
# try out different alphas
pc_0.01 <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.01,
labels = colnames(data))
plot(pc_0.01, main = "Graph structure alpha = 0.01")
pc_0.001 <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.001,
labels = colnames(data))
plot(pc_0.001, main = "Graph structure alpha = 0.001")
pc_0.00001 <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.00001,
labels = colnames(data))
plot(pc_0.00001, main = "Graph structure alpha = 0.00001")
pc_0.9 <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.9,
labels = colnames(data))
plot(pc_0.9, main = "Graph structure alpha = 0.9")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(pcalg)
library(BiDAG)
library(graph)
# load the data
data <- readRDS("MVN_DAG.rds")
# plot the scatterplot
ggplot(data, aes(x = A, y = B)) +
geom_point()+
theme(plot.title = element_text(hjust = 0.5))+
ggtitle("Scatterplot observations of A and B") +
xlab("A") +
ylab("B")+
geom_smooth(method = 'lm')
# hypothesis testing
cor.test(data$A,data$B)
residuals_AC <- residuals(lm(A ~ C, data= data))
residuals_BC <- residuals(lm(B ~ C, data= data))
residuals_df <- data.frame('A_residuals' = residuals_AC, 'B_residuals' = residuals_BC)
ggplot(residuals_df, aes(x = A_residuals, y = B_residuals)) +
geom_point()+
theme(plot.title = element_text(hjust = 0.5))+
ggtitle("Scatterplot observations of A and B (both regressed on C) residuals") +
xlab("A_residuals") +
ylab("B_residuals")+
geom_smooth(method = 'lm')
# hypothesis testing
cor.test(residuals_df$A_residuals, residuals_df$B_residuals)
# run PC algorithm
pc <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.05,
labels = colnames(data)
)
plot(pc, main = "Graph structure alpha = 0.05")
# try out different alphas
pc_0.01 <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.01,
labels = colnames(data))
plot(pc_0.01, main = "Graph structure alpha = 0.01")
pc_0.001 <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.001,
labels = colnames(data))
plot(pc_0.001, main = "Graph structure alpha = 0.001")
pc_0.00001 <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.00001,
labels = colnames(data))
plot(pc_0.00001, main = "Graph structure alpha = 0.00001")
Score <- scoreparameters("bge", data)
maxBN <- learnBN(Score, algorithm = "orderIter")
plot(maxBN$CPDAG)
plot(graphAM(as.matrix(maxBN$CPDAG),edgemode = "directed"))
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <-edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior)
#try out for different α_μ
Score <- scoreparameters("bge", data,  bgepar = list(am = 0.1, aw = NULL))
maxBN <- learnBN(Score, algorithm = "orderIter")
plot(maxBN$CPDAG)
plot(graphAM(as.matrix(maxBN$CPDAG),edgemode = "directed"))
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <-edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior)
Score <- scoreparameters("bge", data,  bgepar = list(am = 0.001, aw = NULL))
maxBN <- learnBN(Score, algorithm = "orderIter")
plot(maxBN$CPDAG)
plot(graphAM(as.matrix(maxBN$CPDAG),edgemode = "directed"))
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <-edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior)
Score <- scoreparameters("bge", data, bgepar = list(am = 100, aw = NULL))
maxBN <- learnBN(Score, algorithm = "orderIter")
plot(maxBN$CPDAG)
plot(graphAM(as.matrix(maxBN$CPDAG),edgemode = "directed"))
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <-edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior)
Score <- scoreparameters("bge", data)
maxBN <- learnBN(Score, algorithm = "orderIter")
plot(maxBN$CPDAG)
plot(graphAM(as.matrix(maxBN$CPDAG),edgemode = "directed"))
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <-edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior, Colv=NA, Rowv=NA, scale='none')
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(pcalg)
library(BiDAG)
library(graph)
# load the data
data <- readRDS("MVN_DAG.rds")
# plot the scatterplot
ggplot(data, aes(x = A, y = B)) +
geom_point()+
theme(plot.title = element_text(hjust = 0.5))+
ggtitle("Scatterplot observations of A and B") +
xlab("A") +
ylab("B")+
geom_smooth(method = 'lm')
# hypothesis testing
cor.test(data$A,data$B)
residuals_AC <- residuals(lm(A ~ C, data= data))
residuals_BC <- residuals(lm(B ~ C, data= data))
residuals_df <- data.frame('A_residuals' = residuals_AC, 'B_residuals' = residuals_BC)
ggplot(residuals_df, aes(x = A_residuals, y = B_residuals)) +
geom_point()+
theme(plot.title = element_text(hjust = 0.5))+
ggtitle("Scatterplot observations of A and B (both regressed on C) residuals") +
xlab("A_residuals") +
ylab("B_residuals")+
geom_smooth(method = 'lm')
# hypothesis testing
cor.test(residuals_df$A_residuals, residuals_df$B_residuals)
# run PC algorithm
pc <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.05,
labels = colnames(data)
)
plot(pc, main = "Graph structure alpha = 0.05")
# try out different alphas
pc_0.01 <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.01,
labels = colnames(data))
plot(pc_0.01, main = "Graph structure alpha = 0.01")
pc_0.001 <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.001,
labels = colnames(data))
plot(pc_0.001, main = "Graph structure alpha = 0.001")
pc_0.00001 <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.00001,
labels = colnames(data))
plot(pc_0.00001, main = "Graph structure alpha = 0.00001")
pc_0.9 <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.9,
labels = colnames(data))
plot(pc_0.9, main = "Graph structure alpha = 0.9")
Score <- scoreparameters("bge", data)
maxBN <- learnBN(Score, algorithm = "orderIter")
plot(maxBN$CPDAG)
plot(graphAM(as.matrix(maxBN$CPDAG),edgemode = "directed"))
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <-edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior, Colv=NA, Rowv=NA, scale='none')
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <-edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior, Colv=NA, scale='none')
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <-edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior, Colv=NA, Rowv=NA, scale='none')
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(pcalg)
library(BiDAG)
library(graph)
# load the data
data <- readRDS("MVN_DAG.rds")
# plot the scatterplot
ggplot(data, aes(x = A, y = B)) +
geom_point()+
theme(plot.title = element_text(hjust = 0.5))+
ggtitle("Scatterplot observations of A and B") +
xlab("A") +
ylab("B")+
geom_smooth(method = 'lm')
# hypothesis testing
cor.test(data$A,data$B)
residuals_AC <- residuals(lm(A ~ C, data= data))
residuals_BC <- residuals(lm(B ~ C, data= data))
residuals_df <- data.frame('A_residuals' = residuals_AC, 'B_residuals' = residuals_BC)
ggplot(residuals_df, aes(x = A_residuals, y = B_residuals)) +
geom_point()+
theme(plot.title = element_text(hjust = 0.5))+
ggtitle("Scatterplot observations of A and B (both regressed on C) residuals") +
xlab("A_residuals") +
ylab("B_residuals")+
geom_smooth(method = 'lm')
# hypothesis testing
cor.test(residuals_df$A_residuals, residuals_df$B_residuals)
# run PC algorithm
pc <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.05,
labels = colnames(data)
)
plot(pc, main = "Graph structure alpha = 0.05")
# try out different alphas
pc_0.01 <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.01,
labels = colnames(data))
plot(pc_0.01, main = "Graph structure alpha = 0.01")
pc_0.001 <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.001,
labels = colnames(data))
plot(pc_0.001, main = "Graph structure alpha = 0.001")
pc_0.00001 <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.00001,
labels = colnames(data))
plot(pc_0.00001, main = "Graph structure alpha = 0.00001")
pc_0.9 <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.9,
labels = colnames(data))
plot(pc_0.9, main = "Graph structure alpha = 0.9")
Score <- scoreparameters("bge", data)
maxBN <- learnBN(Score, algorithm = "orderIter")
plot(maxBN$CPDAG)
plot(graphAM(as.matrix(maxBN$CPDAG),edgemode = "directed"))
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <-edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior, Colv=NA, Rowv=NA, scale='none')
#try out for different α_μ
Score <- scoreparameters("bge", data,  bgepar = list(am = 0.1, aw = NULL))
maxBN <- learnBN(Score, algorithm = "orderIter")
plot(maxBN$CPDAG)
plot(graphAM(as.matrix(maxBN$CPDAG),edgemode = "directed"))
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <-edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior, Colv=NA, Rowv=NA, scale='none')
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <-edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior, Colv=NA, Rowv=sort(c("A", "B", "C", "D", "E", "F")), scale='none')
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <-edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior, Colv=NA, Rowv=sort, scale='none')
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <-edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior, Colv=NA, Rowv=sort(), scale='none')
maxBN$CPDAG
rownames(maxBN$CPDAG)
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <-edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior, Colv=NA, Rowv=sort(rownames(maxBN$CPDAG)), scale='none')
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <-edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior, Colv=NA, Rowv=NA, scale='none')
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <-edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior, Colv=NA, Rowv=NA)
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <-edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior, Colv=NA, Rowv=NA, scale='none')
maxBN$CPDAG
maxBN$CPDAG
new_order <- sort(rownames(maxBN$CPDAG), decreasing=TRUE)
maxBN$CPDAG <- data[new_order, ]
maxBN$CPDAG
maxBN$CPDAG
new_order <- sort(rownames(maxBN$CPDAG), decreasing=TRUE)
maxBN$CPDAG <- maxBN$CPDAG[new_order, ]
maxBN$CPDAG
Score <- scoreparameters("bge", data)
maxBN <- learnBN(Score, algorithm = "orderIter")
new_order <- sort(rownames(maxBN$CPDAG), decreasing=TRUE)
neword_maxbn <- maxBN$CPDAG[new_order, ]
neword_maxbn
new_order <- sort(rownames(maxBN$CPDAG), decreasing=TRUE)
neword_maxbn <- maxBN$CPDAG[new_order, ]
maxBN$CPDAG <- neword_maxbn
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <-edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior, Colv=NA, Rowv=NA, scale='none')
new_order <- sort(colnames(maxBN$CPDAG), decreasing=TRUE)
neword_maxbn <- maxBN$CPDAG[new_order, ]
maxBN$CPDAG <- neword_maxbn
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <-edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior, Colv=NA, Rowv=NA, scale='none')
new_order <- sort(colnames(maxBN$CPDAG), decreasing=TRUE)
neword_maxbn <- maxBN$CPDAG[new_order, ]
maxBN$CPDAG <- neword_maxbn
maxBN$CPDAG
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <- edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior, Colv=NA, Rowv=c(6, 5, 4, 3, 2, 1), scale='none')
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <- edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior, Colv=NA, Rowv=c(6, 5, 4, 3, 2, 1), dendrogram='none', scale='none')
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <- edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior, Colv=NA, Rowv=c(6, 5, 4, 3, 2, 1), keep.dendro=FALSE, scale='none')
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <- edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior, Colv=NA, Rowv=c(6, 5, 4, 3, 2, 1), dendrogram="none", scale='none')
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <- edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior, Colv=NA, Rowv=c(1, 2, 3, 4, 5, 6), dendrogram="none", scale='none')
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <- edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior, Colv=c(1, 2, 3, 4, 5, 6), Rowv=c(1, 2, 3, 4, 5, 6), dendrogram="none", scale='none')
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <- edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior, Colv=NA, Rowv=NA, dendrogram="none", scale='none')
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <- edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior, Colv=c(6, 5, 4, 3, 2, 1), Rowv=NA, scale='none')
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <- edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior, Colv=NA, Rowv=NA, scale='none')
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(pcalg)
library(BiDAG)
library(graph)
# load the data
data <- readRDS("MVN_DAG.rds")
# plot the scatterplot
ggplot(data, aes(x = A, y = B)) +
geom_point()+
theme(plot.title = element_text(hjust = 0.5))+
ggtitle("Scatterplot observations of A and B") +
xlab("A") +
ylab("B")+
geom_smooth(method = 'lm')
# hypothesis testing
cor.test(data$A,data$B)
residuals_AC <- residuals(lm(A ~ C, data= data))
residuals_BC <- residuals(lm(B ~ C, data= data))
residuals_df <- data.frame('A_residuals' = residuals_AC, 'B_residuals' = residuals_BC)
ggplot(residuals_df, aes(x = A_residuals, y = B_residuals)) +
geom_point()+
theme(plot.title = element_text(hjust = 0.5))+
ggtitle("Scatterplot observations of A and B (both regressed on C) residuals") +
xlab("A_residuals") +
ylab("B_residuals")+
geom_smooth(method = 'lm')
# hypothesis testing
cor.test(residuals_df$A_residuals, residuals_df$B_residuals)
# run PC algorithm
pc <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.05,
labels = colnames(data)
)
plot(pc, main = "Graph structure alpha = 0.05")
# try out different alphas
pc_0.01 <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.01,
labels = colnames(data))
plot(pc_0.01, main = "Graph structure alpha = 0.01")
pc_0.001 <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.001,
labels = colnames(data))
plot(pc_0.001, main = "Graph structure alpha = 0.001")
pc_0.00001 <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.00001,
labels = colnames(data))
plot(pc_0.00001, main = "Graph structure alpha = 0.00001")
pc_0.9 <- pc(list(C = cor(data), n = nrow(data)),
indepTest = gaussCItest,
alpha = 0.9,
labels = colnames(data))
plot(pc_0.9, main = "Graph structure alpha = 0.9")
Score <- scoreparameters("bge", data)
maxBN <- learnBN(Score, algorithm = "orderIter")
plot(maxBN$CPDAG)
plot(graphAM(as.matrix(maxBN$CPDAG),edgemode = "directed"))
partitionsample <- sampleBN(Score, algorithm = "partition", startspace = maxBN$endspace)
edgesposterior <- edgep(partitionsample, pdag=TRUE)
heatmap(edgesposterior, Colv=NA, Rowv=NA, scale='none')
library(rmarkdown)
rmarkdown::render("project9.Rmd", output_format = "pdf_document")
knitr::opts_chunk$set(echo = TRUE)
library(rmarkdown)
rmarkdown::render("project9.Rmd", output_format = "pdf_document")
library(rmarkdown)
rmarkdown::render("project9.Rmd", output_format = "pdf_document")
